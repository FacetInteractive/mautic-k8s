<?php

namespace Debril\RssAtomBundle\Driver;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-25 at 23:47:50.
 */
class HttpDriverResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HttpDriverResponse
     */
    protected $object;

    /**
     * @var array
     */
    protected $headers = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new HttpDriverResponse();

        $lastModified = new \DateTime();
        $this->headers = array(
            'Last-Modified' => $lastModified->format(\DateTime::RFC2822),
        );

        $this->object->setHeaders($this->headers);

        $this->object->setBody('a long string ...');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::getHeaders
     */
    public function testGetHeaders()
    {
        $this->assertInternalType(('array'), $this->object->getHeaders());
    }

    /**
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::setHeaders
     */
    public function testSetHeaders()
    {
        $this->headers['Content-Type'] = 'Content-Type: text/html; charset=utf-8';

        $this->object->setHeaders($this->headers);

        $this->assertEquals($this->headers, $this->object->getHeaders());
    }

    /**
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::getBody
     *
     * @todo   Implement testGetBody().
     */
    public function testGetBody()
    {
        $this->assertInternalType('string', $this->object->getBody());
    }

    /**
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::setBody
     */
    public function testSetBody()
    {
        $string = 'Lorem Ipsum, some long text';
        $this->object->setBody($string);

        $this->assertEquals($string, $this->object->getBody());
    }

    /**
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::setHttpCode
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::getHttpCode
     */
    public function testSetHttpCode()
    {
        $this->object->setHttpCode(200);

        $this->assertEquals(200, $this->object->getHttpCode());
    }

    /**
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::getHttpCodeIsOk
     */
    public function testGetHttpCodeIsOk()
    {
        $this->object->setHttpCode(200);

        $this->assertEquals(true, $this->object->getHttpCodeIsOk());

        $this->object->setHttpCode(404);

        $this->assertEquals(false, $this->object->getHttpCodeIsOk());
    }

    /**
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::getHttpVersion
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::setHttpVersion
     */
    public function testGetHttpVersion()
    {
        $this->object->setHttpVersion('1.1');
        $this->assertEquals('1.1', $this->object->getHttpVersion());
    }

    /**
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::getHttpMessage
     * @covers Debril\RssAtomBundle\Driver\HttpDriverResponse::setHttpMessage
     */
    public function testGetHttpMessage()
    {
        $message = 'Request ...';
        $this->object->setHttpmessage($message);
        $this->assertEquals($message, $this->object->getHttpMessage());
    }
}
