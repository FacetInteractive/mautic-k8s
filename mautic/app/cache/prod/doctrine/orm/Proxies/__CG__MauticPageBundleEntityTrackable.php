<?php

namespace Proxies\__CG__\Mautic\PageBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Trackable extends \Mautic\PageBundle\Entity\Trackable implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'redirect', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'channel', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'channelId', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'hits', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'uniqueHits');
        }

        return array('__isInitialized__', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'redirect', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'channel', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'channelId', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'hits', '' . "\0" . 'Mautic\\PageBundle\\Entity\\Trackable' . "\0" . 'uniqueHits');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Trackable $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getRedirect()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRedirect', array());

        return parent::getRedirect();
    }

    /**
     * {@inheritDoc}
     */
    public function setRedirect(\Mautic\PageBundle\Entity\Redirect $redirect)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRedirect', array($redirect));

        return parent::setRedirect($redirect);
    }

    /**
     * {@inheritDoc}
     */
    public function getChannel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChannel', array());

        return parent::getChannel();
    }

    /**
     * {@inheritDoc}
     */
    public function setChannel($channel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChannel', array($channel));

        return parent::setChannel($channel);
    }

    /**
     * {@inheritDoc}
     */
    public function getChannelId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getChannelId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChannelId', array());

        return parent::getChannelId();
    }

    /**
     * {@inheritDoc}
     */
    public function setChannelId($channelId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChannelId', array($channelId));

        return parent::setChannelId($channelId);
    }

    /**
     * {@inheritDoc}
     */
    public function getHits()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHits', array());

        return parent::getHits();
    }

    /**
     * {@inheritDoc}
     */
    public function setHits($hits)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHits', array($hits));

        return parent::setHits($hits);
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueHits()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueHits', array());

        return parent::getUniqueHits();
    }

    /**
     * {@inheritDoc}
     */
    public function setUniqueHits($uniqueHits)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUniqueHits', array($uniqueHits));

        return parent::setUniqueHits($uniqueHits);
    }

}
