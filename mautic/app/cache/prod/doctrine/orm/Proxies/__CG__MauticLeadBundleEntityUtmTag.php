<?php

namespace Proxies\__CG__\Mautic\LeadBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class UtmTag extends \Mautic\LeadBundle\Entity\UtmTag implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'id', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'dateAdded', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'lead', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'query', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'referer', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'remoteHost', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'url', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'userAgent', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmCampaign', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmContent', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmMedium', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmSource', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmTerm');
        }

        return array('__isInitialized__', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'id', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'dateAdded', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'lead', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'query', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'referer', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'remoteHost', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'url', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'userAgent', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmCampaign', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmContent', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmMedium', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmSource', '' . "\0" . 'Mautic\\LeadBundle\\Entity\\UtmTag' . "\0" . 'utmTerm');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (UtmTag $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateAdded(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateAdded', array($date));

        return parent::setDateAdded($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateAdded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateAdded', array());

        return parent::getDateAdded();
    }

    /**
     * {@inheritDoc}
     */
    public function getLead()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLead', array());

        return parent::getLead();
    }

    /**
     * {@inheritDoc}
     */
    public function setLead(\Mautic\LeadBundle\Entity\Lead $lead)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLead', array($lead));

        return parent::setLead($lead);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuery()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuery', array());

        return parent::getQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuery($query)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuery', array($query));

        return parent::setQuery($query);
    }

    /**
     * {@inheritDoc}
     */
    public function setReferer($referer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReferer', array($referer));

        return parent::setReferer($referer);
    }

    /**
     * {@inheritDoc}
     */
    public function getReferer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferer', array());

        return parent::getReferer();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemoteHost($remoteHost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemoteHost', array($remoteHost));

        return parent::setRemoteHost($remoteHost);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemoteHost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemoteHost', array());

        return parent::getRemoteHost();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($url));

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserAgent($userAgent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserAgent', array($userAgent));

        return parent::setUserAgent($userAgent);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserAgent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserAgent', array());

        return parent::getUserAgent();
    }

    /**
     * {@inheritDoc}
     */
    public function getUtmCampaign()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUtmCampaign', array());

        return parent::getUtmCampaign();
    }

    /**
     * {@inheritDoc}
     */
    public function setUtmCampaign($utmCampaign)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUtmCampaign', array($utmCampaign));

        return parent::setUtmCampaign($utmCampaign);
    }

    /**
     * {@inheritDoc}
     */
    public function getUtmContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUtmContent', array());

        return parent::getUtmContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setUtmContent($utmContent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUtmContent', array($utmContent));

        return parent::setUtmContent($utmContent);
    }

    /**
     * {@inheritDoc}
     */
    public function getUtmMedium()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUtmMedium', array());

        return parent::getUtmMedium();
    }

    /**
     * {@inheritDoc}
     */
    public function setUtmMedium($utmMedium)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUtmMedium', array($utmMedium));

        return parent::setUtmMedium($utmMedium);
    }

    /**
     * {@inheritDoc}
     */
    public function getUtmSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUtmSource', array());

        return parent::getUtmSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setUtmSource($utmSource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUtmSource', array($utmSource));

        return parent::setUtmSource($utmSource);
    }

    /**
     * {@inheritDoc}
     */
    public function getUtmTerm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUtmTerm', array());

        return parent::getUtmTerm();
    }

    /**
     * {@inheritDoc}
     */
    public function setUtmTerm($utmTerm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUtmTerm', array($utmTerm));

        return parent::setUtmTerm($utmTerm);
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldSetterList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldSetterList', array());

        return parent::getFieldSetterList();
    }

}
