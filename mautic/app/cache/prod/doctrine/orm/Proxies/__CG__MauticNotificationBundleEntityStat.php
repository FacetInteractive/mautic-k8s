<?php

namespace Proxies\__CG__\Mautic\NotificationBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Stat extends \Mautic\NotificationBundle\Entity\Stat implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'id', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'notification', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'lead', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'list', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'ipAddress', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'dateSent', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'dateRead', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'isClicked', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'dateClicked', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'trackingHash', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'retryCount', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'source', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'sourceId', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'tokens', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'clickCount', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'clickDetails', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'lastClicked');
        }

        return array('__isInitialized__', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'id', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'notification', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'lead', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'list', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'ipAddress', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'dateSent', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'dateRead', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'isClicked', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'dateClicked', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'trackingHash', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'retryCount', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'source', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'sourceId', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'tokens', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'clickCount', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'clickDetails', '' . "\0" . 'Mautic\\NotificationBundle\\Entity\\Stat' . "\0" . 'lastClicked');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Stat $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getDateClicked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateClicked', array());

        return parent::getDateClicked();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateClicked($dateClicked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateClicked', array($dateClicked));

        return parent::setDateClicked($dateClicked);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateSent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateSent', array());

        return parent::getDateSent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateSent($dateSent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateSent', array($dateSent));

        return parent::setDateSent($dateSent);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotification', array());

        return parent::getNotification();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotification(\Mautic\NotificationBundle\Entity\Notification $notification = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotification', array($notification));

        return parent::setNotification($notification);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getIpAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIpAddress', array());

        return parent::getIpAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setIpAddress(\Mautic\CoreBundle\Entity\IpAddress $ip)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIpAddress', array($ip));

        return parent::setIpAddress($ip);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsClicked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsClicked', array());

        return parent::getIsClicked();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsClicked($isClicked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsClicked', array($isClicked));

        return parent::setIsClicked($isClicked);
    }

    /**
     * {@inheritDoc}
     */
    public function getLead()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLead', array());

        return parent::getLead();
    }

    /**
     * {@inheritDoc}
     */
    public function setLead(\Mautic\LeadBundle\Entity\Lead $lead = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLead', array($lead));

        return parent::setLead($lead);
    }

    /**
     * {@inheritDoc}
     */
    public function getTrackingHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTrackingHash', array());

        return parent::getTrackingHash();
    }

    /**
     * {@inheritDoc}
     */
    public function setTrackingHash($trackingHash)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTrackingHash', array($trackingHash));

        return parent::setTrackingHash($trackingHash);
    }

    /**
     * {@inheritDoc}
     */
    public function getList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getList', array());

        return parent::getList();
    }

    /**
     * {@inheritDoc}
     */
    public function setList($list)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setList', array($list));

        return parent::setList($list);
    }

    /**
     * {@inheritDoc}
     */
    public function getRetryCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRetryCount', array());

        return parent::getRetryCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setRetryCount($retryCount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRetryCount', array($retryCount));

        return parent::setRetryCount($retryCount);
    }

    /**
     * {@inheritDoc}
     */
    public function upRetryCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upRetryCount', array());

        return parent::upRetryCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', array());

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setSource($source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', array($source));

        return parent::setSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceId', array());

        return parent::getSourceId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSourceId($sourceId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSourceId', array($sourceId));

        return parent::setSourceId($sourceId);
    }

    /**
     * {@inheritDoc}
     */
    public function getTokens()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTokens', array());

        return parent::getTokens();
    }

    /**
     * {@inheritDoc}
     */
    public function setTokens($tokens)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTokens', array($tokens));

        return parent::setTokens($tokens);
    }

    /**
     * {@inheritDoc}
     */
    public function getClickCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClickCount', array());

        return parent::getClickCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setClickCount($clickCount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClickCount', array($clickCount));

        return parent::setClickCount($clickCount);
    }

    /**
     * {@inheritDoc}
     */
    public function addClickDetails($details)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addClickDetails', array($details));

        return parent::addClickDetails($details);
    }

    /**
     * {@inheritDoc}
     */
    public function upClickCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upClickCount', array());

        return parent::upClickCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastClicked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastClicked', array());

        return parent::getLastClicked();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastClicked(\DateTime $lastClicked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastClicked', array($lastClicked));

        return parent::setLastClicked($lastClicked);
    }

    /**
     * {@inheritDoc}
     */
    public function getClickDetails()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClickDetails', array());

        return parent::getClickDetails();
    }

    /**
     * {@inheritDoc}
     */
    public function setClickDetails($clickDetails)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClickDetails', array($clickDetails));

        return parent::setClickDetails($clickDetails);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateRead()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateRead', array());

        return parent::getDateRead();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateRead($dateRead)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateRead', array($dateRead));

        return parent::setDateRead($dateRead);
    }

}
