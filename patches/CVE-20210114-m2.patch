diff --git a/app/bundles/CoreBundle/Helper/InputHelper.php b/app/bundles/CoreBundle/Helper/InputHelper.php
index 870d1ad1d..6de0b1715 100644
--- a/app/bundles/CoreBundle/Helper/InputHelper.php
+++ b/app/bundles/CoreBundle/Helper/InputHelper.php
@@ -32,9 +32,6 @@ class InputHelper
      */
     private static $htmlFilter;
 
-    /**
-     * @var
-     */
     private static $strictHtmlFilter;
 
     /**
@@ -142,7 +139,7 @@ public static function _($value, $mask = 'clean', $urldecode = false)
 
                 if (is_array($v)) {
                     $v = self::_($v, $useMask, $urldecode);
-                } elseif ($useMask == 'filter') {
+                } elseif ('filter' == $useMask) {
                     $v = self::getFilter()->clean($v, $useMask);
                 } else {
                     $v = self::$useMask($v, $urldecode);
@@ -300,43 +297,46 @@ public static function url($value, $urldecode = false, $allowedProtocols = null,
         $value = filter_var($value, FILTER_SANITIZE_URL);
         $parts = parse_url($value);
 
-        if ($parts && !empty($parts['path'])) {
-            if (isset($parts['scheme'])) {
-                if (!in_array($parts['scheme'], $allowedProtocols)) {
-                    $parts['scheme'] = $defaultProtocol;
-                }
-            } else {
-                $parts['scheme'] = $defaultProtocol;
-            }
+        if (!$parts || !filter_var($value, FILTER_VALIDATE_URL)) {
+            // This is a bad URL so just clean the whole thing and return it
+            return self::clean($value);
+        }
 
-            if (!empty($removeQuery) && !empty($parts['query'])) {
-                parse_str($parts['query'], $query);
-                foreach ($removeQuery as $q) {
-                    if (isset($query[$q])) {
-                        unset($query[$q]);
-                    }
+        $parts['scheme'] = isset($parts['scheme']) ? $parts['scheme'] : $defaultProtocol;
+        if (!in_array($parts['scheme'], $allowedProtocols)) {
+            $parts['scheme'] = $defaultProtocol;
+        }
+
+        if (!empty($parts['query'])) {
+            parse_str($parts['query'], $query);
+
+            // remove specified keys from the query
+            foreach ($removeQuery as $q) {
+                if (isset($query[$q])) {
+                    unset($query[$q]);
                 }
-                $parts['query'] = http_build_query($query);
             }
 
-            $value =
-                (!empty($parts['scheme']) ? $parts['scheme'].'://' : '').
-                (!empty($parts['user']) ? $parts['user'].':' : '').
-                (!empty($parts['pass']) ? $parts['pass'].'@' : '').
-                (!empty($parts['host']) ? $parts['host'] : '').
-                (!empty($parts['port']) ? ':'.$parts['port'] : '').
-                (!empty($parts['path']) ? $parts['path'] : '').
-                (!empty($parts['query']) ? '?'.$parts['query'] : '').
-                (!$ignoreFragment && !empty($parts['fragment']) ? '#'.$parts['fragment'] : '');
-        } else {
-            //must have a really bad URL since parse_url returned false so let's just clean it
-            $value = self::clean($value);
+            // http_build_query urlencodes by default
+            $parts['query'] = http_build_query($query);
         }
 
-        //since a URL allows <>, let's add a safety step to remove <script> tags
-        $value = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $value);
-
-        return $value;
+        return
+            // already clean due to the exclusion list above
+            (!empty($parts['scheme']) ? $parts['scheme'].'://' : '').
+            // strip tags that could be embedded in the username or password
+            (!empty($parts['user']) ? strip_tags($parts['user']).':' : '').
+            (!empty($parts['pass']) ? strip_tags($parts['pass']).'@' : '').
+            // should be caught by FILTER_VALIDATE_URL if the host has invalid characters
+            (!empty($parts['host']) ? $parts['host'] : '').
+            // type cast to int
+            (!empty($parts['port']) ? ':'.(int) $parts['port'] : '').
+            // strip tags that could be embedded in a path
+            (!empty($parts['path']) ? strip_tags($parts['path']) : '').
+            // cleaned through the parse_str (urldecode) and http_build_query (urlencode) above
+            (!empty($parts['query']) ? '?'.$parts['query'] : '').
+            // strip tags that could be embedded in the fragment
+            (!$ignoreFragment && !empty($parts['fragment']) ? '#'.strip_tags($parts['fragment']) : '');
     }
 
     /**
diff --git a/app/bundles/ApiBundle/Form/Type/ClientType.php b/app/bundles/ApiBundle/Form/Type/ClientType.php
index 2417d7792..6b0427ed8 100644
--- a/app/bundles/ApiBundle/Form/Type/ClientType.php
+++ b/app/bundles/ApiBundle/Form/Type/ClientType.php
@@ -64,7 +64,7 @@ public function __construct(MauticFactory $factory)
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->addEventSubscriber(new CleanFormSubscriber());
+        $builder->addEventSubscriber(new CleanFormSubscriber([]));
         $builder->addEventSubscriber(new FormExitSubscriber('api.client', $options));
 
         if (!$options['data']->getId()) {
diff --git a/app/bundles/CategoryBundle/Form/Type/CategoryType.php b/app/bundles/CategoryBundle/Form/Type/CategoryType.php
index 50f974a69..81d7a2a3f 100644
--- a/app/bundles/CategoryBundle/Form/Type/CategoryType.php
+++ b/app/bundles/CategoryBundle/Form/Type/CategoryType.php
@@ -53,7 +53,7 @@ public function __construct(TranslatorInterface $translator, Session $session)
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->addEventSubscriber(new CleanFormSubscriber());
+        $builder->addEventSubscriber(new CleanFormSubscriber([]));
         $builder->addEventSubscriber(new FormExitSubscriber('category.category', $options));
 
         if (!$options['data']->getId()) {
diff --git a/app/bundles/LeadBundle/Form/Type/CompanyType.php b/app/bundles/LeadBundle/Form/Type/CompanyType.php
index 93a2b4022..67a8f6ffa 100644
--- a/app/bundles/LeadBundle/Form/Type/CompanyType.php
+++ b/app/bundles/LeadBundle/Form/Type/CompanyType.php
@@ -13,6 +13,7 @@
 
 use Doctrine\ORM\EntityManager;
 use Mautic\CoreBundle\Form\DataTransformer\IdToEntityModelTransformer;
+use Mautic\CoreBundle\Form\EventListener\CleanFormSubscriber;
 use Mautic\CoreBundle\Security\Permissions\CorePermissions;
 use Symfony\Component\Form\AbstractType;
 use Symfony\Component\Form\FormBuilderInterface;
@@ -62,7 +63,8 @@ public function __construct(EntityManager $entityManager, CorePermissions $secur
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $this->getFormFields($builder, $options, 'company');
+        $cleaningRules                 = $this->getFormFields($builder, $options, 'company');
+        $cleaningRules['companyemail'] = 'email';
 
         $transformer = new IdToEntityModelTransformer(
             $this->em,
@@ -142,6 +144,8 @@ public function buildForm(FormBuilderInterface $builder, array $options)
                 ],
             ],
         ]);
+
+        $builder->addEventSubscriber(new CleanFormSubscriber($cleaningRules));
     }
 
     /**
diff --git a/app/bundles/UserBundle/Form/Type/PasswordResetConfirmType.php b/app/bundles/UserBundle/Form/Type/PasswordResetConfirmType.php
index 0c734dc82..00b23285f 100644
--- a/app/bundles/UserBundle/Form/Type/PasswordResetConfirmType.php
+++ b/app/bundles/UserBundle/Form/Type/PasswordResetConfirmType.php
@@ -26,7 +26,7 @@ class PasswordResetConfirmType extends AbstractType
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->addEventSubscriber(new CleanFormSubscriber());
+        $builder->addEventSubscriber(new CleanFormSubscriber([]));
 
         $builder->add('identifier', 'text', [
             'label'      => 'mautic.user.auth.form.loginusername',
diff --git a/app/bundles/UserBundle/Form/Type/PasswordResetType.php b/app/bundles/UserBundle/Form/Type/PasswordResetType.php
index 039017107..c8cdb5bc8 100644
--- a/app/bundles/UserBundle/Form/Type/PasswordResetType.php
+++ b/app/bundles/UserBundle/Form/Type/PasswordResetType.php
@@ -26,7 +26,7 @@ class PasswordResetType extends AbstractType
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->addEventSubscriber(new CleanFormSubscriber());
+        $builder->addEventSubscriber(new CleanFormSubscriber([]));
 
         $builder->add('identifier', 'text', [
             'label'      => 'mautic.user.auth.form.loginusername',
diff --git a/app/bundles/UserBundle/Form/Type/UserType.php b/app/bundles/UserBundle/Form/Type/UserType.php
index 794159f22..1de64a9e6 100644
--- a/app/bundles/UserBundle/Form/Type/UserType.php
+++ b/app/bundles/UserBundle/Form/Type/UserType.php
@@ -89,7 +89,7 @@ public function __construct(
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->addEventSubscriber(new CleanFormSubscriber());
+        $builder->addEventSubscriber(new CleanFormSubscriber(['signature' => 'html', 'email' => 'email']));
         $builder->addEventSubscriber(new FormExitSubscriber('user.user', $options));
 
         $builder->add(
diff --git a/plugins/MauticSocialBundle/Form/Type/MonitoringType.php b/plugins/MauticSocialBundle/Form/Type/MonitoringType.php
index 2184ae69d..9f1eec34c 100644
--- a/plugins/MauticSocialBundle/Form/Type/MonitoringType.php
+++ b/plugins/MauticSocialBundle/Form/Type/MonitoringType.php
@@ -23,7 +23,7 @@ class MonitoringType extends AbstractType
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->addEventSubscriber(new CleanFormSubscriber());
+        $builder->addEventSubscriber(new CleanFormSubscriber(['description' => 'html']));
 
         $builder->add('title', 'text', [
             'label'      => 'mautic.core.name',
